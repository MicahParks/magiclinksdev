swagger: "2.0" # https://stackoverflow.com/a/59749691/14797322

# TODO Consistent use of periods
# TODO Confirm every JSON attribute matches
# TODO Proofread everything in the specification

info:
  title: "magiclinks.dev"
  description: "The v2 API specification for the magiclinksdev project.
  \n\n
  The default JWK Set relative URL path is `/api/v1/jwks.json`.
  \n\n
  The documentation site is at https://docs.magiclinks.dev
  \n
  This is an Apache License 2.0 project: https://github.com/MicahParks/magiclinksdev
  \n
  The optional SaaS platform's landing page is: https://magiclinks.dev
  "
  version: "2.0.0"

host: "magiclinks.dev"
basePath: "/api/v2"

schemes:
  - "https"

consumes:
  - "application/json"
produces:
  - "application/json"

paths:
  /ready:
    get:
      summary: "Check if the service is running and ready to accept requests."
      operationId: "ready"
      responses:
        200:
          description: "The service is running and ready to accept requests."
        default:
          description: "The service is not ready to accept requests."

  /admin/service-account/create:
    post:
      tags:
        - "admin"
      summary: "Create a new service account."
      operationId: "serviceAccountCreate"
      parameters:
        - in: "body"
          name: "body"
          required: true
          schema:
            $ref: "#/definitions/ServiceAccountCreateRequest"
      responses:
        201:
          description: "The service account has been created."
          schema:
            $ref: "#/definitions/ServiceAccountCreateResponse"
        default:
          description: "An error occurred."
          schema:
            $ref: "#/definitions/Error"

  /jwt/create:
    post:
      summary: "Create a JWT, typically for a JWT refresh."
      operationId: "jwtCreate"
      parameters:
        - name: "body"
          in: "body"
          required: true
          schema:
            $ref: "#/definitions/JWTCreateRequest"
      responses:
        201:
          description: "The JWT was created."
          schema:
            $ref: "#/definitions/JWTCreateResponse"
        default:
          description: "An error occurred."
          schema:
            $ref: "#/definitions/Error"

  /jwt/validate:
    post:
      summary: "Validate a JWT."
      operationId: "jwtValidate"
      parameters:
        - in: "body"
          name: "body"
          required: true
          schema:
            $ref: "#/definitions/JWTValidateRequest"
      responses:
        200:
          description: "The JWT was signed by an active key in the JWK Set."
          schema:
            $ref: "#/definitions/JWTValidateResponse"
        422:
          description: "The given JWT was invalid."
          schema:
            $ref: "#/definitions/Error"
        default:
          description: "An error occurred."
          schema:
            $ref: "#/definitions/Error"

  /magic-link/create:
    post:
      summary: "Create a magic link."
      operationId: "magicLinkCreate"
      parameters:
        - in: "body"
          name: "body"
          required: true
          schema:
            $ref: "#/definitions/MagicLinkCreateRequest"
      responses:
        201:
          description: "The magic link was created."
          schema:
            $ref: "#/definitions/MagicLinkCreateResponse"
        default:
          description: "An unexpected error occurred."
          schema:
            $ref: "#/definitions/Error"

  /magic-link-email/create:
    post:
      summary: "Create a magic link and send it via email."
      operationId: "magicLinkEmailCreate"
      parameters:
        - in: "body"
          name: "body"
          required: true
          schema:
            $ref: "#/definitions/MagicLinkEmailCreateRequest"
      responses:
        201:
          description: "The magic link has been created and the email request has been accepted by the provider."
          schema:
            $ref: "#/definitions/MagicLinkEmailCreateResponse"
        default:
          description: "An unexpected error occurred."
          schema:
            $ref: "#/definitions/Error"

  /otp/create: # TODO Add in Go code.
    post:
      summary: "Create a One-Time Password (OTP)."
      operationId: "otpCreate"
      parameters:
        - in: "body"
          name: "body"
          required: true
          schema:
            $ref: "#/definitions/OTPCreateRequest"
      responses:
        201:
          description: "The OTP was created."
          schema:
            $ref: "#/definitions/OTPCreateResponse"
        default:
          description: "An unexpected error occurred."
          schema:
            $ref: "#/definitions/Error"

  /otp-email/create: # TODO Add in Go code.
    post:
      summary: "Create a One-Time Password (OTP) and sent it via email."
      operationId: "otpEmailCreate"
      parameters:
        - in: "body"
          name: "body"
          required: true
          schema:
            $ref: "#/definitions/OTPEmailCreateRequest"
      responses:
        201:
          description: "The OTP has been created and the email request has been accepted by the provider."
          schema:
            $ref: "#/definitions/OTPEmailCreateResponse"
        default:
          description: "An unexpected error occurred."
          schema:
            $ref: "#/definitions/Error"

  /permanent-magic-link/create: # TODO Add in Go code.
    post:
      summary: "Create a permanent magic link."
      operationId: "permanentMagicLinkCreate"
      parameters:
        - in: "body"
          name: "body"
          required: true
          schema:
            $ref: "#/definitions/PermanentMagicLinkCreateRequest"
      responses:
        201:
          description: "The permanent magic link was created."
          schema:
            $ref: "#/definitions/PermanentMagicLinkCreateResponse"
        default:
          description: "An unexpected error occurred."
          schema:
            $ref: "#/definitions/Error"

  /permanent-magic-link-email/create: # TODO Add in Go code.
    post:
      summary: "Create a permanent magic link and send it via email."
      operationId: "permanentMagicLinkEmailCreate"
      parameters:
        - in: "body"
          name: "body"
          required: true
          schema:
            $ref: "#/definitions/PermanentMagicLinkEmailCreateRequest"
      responses:
        201:
          description: "The permanent magic link has been created and the email request has been accepted by the
          provider."
          schema:
            $ref: "#/definitions/PermanentMagicLinkEmailCreateResponse"
        default:
          description: "An unexpected error occurred."
          schema:
            $ref: "#/definitions/Error"

definitions:
  Error:
    type: "object"
    properties:
      code:
        type: "integer"
        description: "A copy of the HTTP response status code."
        format: "int32"
      message:
        type: "string"
        description: "A human-readable error message."
      requestMetadata:
        $ref: "#/definitions/RequestMetadata"

  RequestMetadata:
    type: "object"
    properties:
      uuid:
        type: "string"
        description: "A UUID that uniquely identifies the request."
        format: "uuid"

  ServiceAccount:
    type: "object"
    properties:
      uuid:
        type: "string"
        format: "uuid"
      apiKey:
        type: "string"
      aud:
        type: "string"
      admin:
        type: "boolean"

  JWTCreateRequest:
    description: "The request body for the /jwt/create endpoint."
    type: "object"
    properties:
      jwtCreateArgs:
        $ref: "#/definitions/JWTCreateArgs"
    required:
      - "jwtCreateArgs"

  JWTCreateArgs:
    description: "Parameters used to create a JWT."
    type: "object"
    properties:
      alg:
        description: "The algorithm to use when signing the JWT. It defaults depends on the server's configuration. The
        default server configuration is \"EdDSA\". The default server options are \"EdDSA\" and \"RS256\"."
        type: "string"
      claims:
        description: 'Any valid JSON object. Do not provide any JSON attributes mentioned in RFC 7519 section 4.1 as
        this will cause an error. These are JWT "Registered Claim Names".'
        type: "object"
        externalDocs:
          description: "RFC 7519 section 4.1"
          url: "https://tools.ietf.org/html/rfc7519#section-4.1"
      lifespanSeconds:
        description: "The lifespan of the JWT in seconds. The JWT's lifespan starts after the magic link has been
        visited and the JWT is signed. It defaults to 5 minutes. The minimum value is 5 seconds and the maximum value is
        7905600000 seconds, which is a bit over 250 years."
        default: 300
        type: "integer"

  JWTCreateResults:
    description: "The results for creating a JWT."
    type: "object"
    properties:
      jwt:
        description: "The signed JWT."
        type: "string"

  JWTCreateResponse:
    description: "The response body for the /jwt/create endpoint."
    type: "object"
    properties:
      jwtCreateResults:
        $ref: "#/definitions/JWTCreateResults"
      requestMetadata:
        $ref: "#/definitions/RequestMetadata"

  JWTValidateRequest:
    description: "The request body for the /jwt/validate endpoint."
    type: "object"
    properties:
      jwtValidateArgs:
        $ref: "#/definitions/JWTValidateArgs"
    required:
      - "jwtValidateArgs"

  JWTValidateArgs:
    description: "Parameters used to validate a JWT."
    type: "object"
    properties:
      jwt:
        description: "The JWT to validate."
        type: "string"

  JWTValidateResults:
    description: "The results for validateing a JWT."
    type: "object"
    properties:
      claims:
        description: 'Any valid JSON object. Do not provide any JSON attributes mentioned in RFC 7519 section 4.1 as
        this will cause an error. These are JWT "Registered Claim Names".'
        type: "object"
        externalDocs:
          description: "RFC 7519 section 4.1"
          url: "https://tools.ietf.org/html/rfc7519#section-4.1"

  JWTValidateResponse:
    description: "The response body for the /jwt/validate endpoint."
    type: "object"
    properties:
      jwtValidateResults:
        $ref: "#/definitions/JWTValidateResults"
      requestMetadata:
        $ref: "#/definitions/RequestMetadata"

  MagicLinkLimits:
    type: "object"
    properties:
      lifespanSeconds:
        description: "The number of seconds the magic link should be active for after the request has been processed. It
        defaults to 1 hour. The minimum value is 5 seconds and the maximum value is 7905600000 seconds, which is a bit
        over 250 years."
        type: "integer"
        default: 3600
      uses: # TODO Add to Go code.
        description: "The number of times the magic link can be used. It defaults to 1. A value of 0 will be converted
        into 1."
        type: "integer"
        default: 1

  MagicLinkCreateArgs:
    description: "Parameters to create a magic link."
    type: "object"
    properties:
      jwtCreateArgs:
        $ref: "#/definitions/JWTCreateArgs"
      redirectQueryKey:
        description: 'The URL query key in the redirectURL to contain the signed JWT when the magic link is used. By
        default, "jwt" is used.'
        type: "string"
      redirectURL:
        description: "The URL to redirect to with the signed JWT when the magic link is used."
        type: "string"
    required:
      - "redirectURL"

  MagicLinkCreateRequest:
    type: "object"
    properties:
      magicLinkCreateArgs:
        $ref: "#/definitions/MagicLinkCreateArgs"
      magicLinkLimits:
        $ref: "#/definitions/MagicLinkLimits"
    required:
      - "magicLinkCreateArgs"
      - "magicLinkLimitations"

  MagicLinkCreateResults:
    type: "object"
    properties:
      magicLink:
        description: "The URL that will act as a magic link. When this URL is visited, a new JWT will be created. A
        redirect wil be performed with this new JWT in the redirect URL's query parameter."
        type: "string"
      secret:
        description: "The secret embedded in the magic link."
        type: "string"

  MagicLinkCreateResponse:
    type: "object"
    properties:
      magicLinkCreateResults:
        $ref: "#/definitions/MagicLinkCreateResults"
      requestMetadata:
        $ref: "#/definitions/RequestMetadata"

  MagicLinkEmailCreateArgs:
    description: "Parameters to create a magic link email."
    type: "object"
    properties:
      buttonText:
        description: 'The text to display on the button in the email. It defaults to "Magic link".'
        type: "string"
        default: "Magic link"
        example: "Login"
      greeting:
        description: 'The smaller text above the title.'
        type: "string"
        example: "Hello Jane Doe,"
      logoClickURL:
        description: "The URL to redirect to when the logo is clicked."
        type: "string"
        example: "https://example.com"
      logoImageURL:
        description: "The URL to the logo image to display in the email."
        type: "string"
        example: "https://example.com/logo.png"
      serviceName:
        description: "The name of your service. This is used in invisible email metadata."
        type: "string"
        example: "example.com"
      subject:
        description: 'The subject of the email. It must be between 5 and 100 characters inclusive. Make sure to include
        the name of your application.'
        type: "string"
        example: "Login to example.com"
      subTitle:
        description: "The smaller text, right above the magic link button."
        type: "string"
        example: "Login using the button below."
      title:
        description: 'The larger text, right above the subtitle. It must be between 5 and 256 characters inclusive.
        Make sure to include the name of your application.'
        type: "string"
        example: "Login to example.com with a magic link"
      toEmail:
        description: "The email address to send the magic link to."
        type: "string"
        format: "email"
        example: "jane.doe@example.com"
      toName:
        description: "The name of the recipient."
        type: "string"
        example: "Jane Doe"
    required:
      - "subject"
      - "title"
      - "toEmail"
      - "serviceName"

  MagicLinkEmailCreateRequest:
    type: "object"
    properties:
      magicLinkCreateArgs:
        $ref: "#/definitions/MagicLinkCreateArgs"
      magicLinkEmailCreateArgs:
        $ref: "#/definitions/MagicLinkEmailCreateArgs"
    required:
      - "magicLinkCreateArgs"
      - "magicLinkEmailCreateArgs"

  MagicLinkEmailCreateResults:
    description: "The results for creating a magic link email."
    type: "object"
    properties:
      magicLinkCreateResults:
        $ref: "#/definitions/MagicLinkCreateResults"

  MagicLinkEmailCreateResponse:
    type: "object"
    properties:
      magicLinkEmailCreateResults:
        $ref: "#/definitions/MagicLinkEmailCreateResults"
      requestMetadata:
        $ref: "#/definitions/RequestMetadata"

  OTPCreateArgs:
    description: "Parameters to create a One-Time Password (OTP)."
    type: "object"
    properties:
      lifespanSeconds:
        description: "The lifespan of the OTP in seconds. The OTP's lifespan starts after the magic link has been
        visited and the OTP is created. It defaults to 5 minutes. The minimum value is 5 seconds and the maximum value is
        7905600000 seconds, which is a bit over 250 years."
        default: 300
        type: "integer"

  OTPCreateRequest:
    type: "object"
    properties:
      otpCreateArgs:
        $ref: "#/definitions/OTPCreateArgs"
    required:
      - "otpCreateArgs"

  OTPCreateResults:
    description: "The results for creating a One-Time Password (OTP)."
    type: "object"
    properties:
      otp:
        description: "The One-Time Password."
        type: "string"

  OTPCreateResponse:
    type: "object"
    properties:
      otpCreateResults:
        $ref: "#/definitions/OTPCreateResults"
      requestMetadata:
        $ref: "#/definitions/RequestMetadata"

  OTPEmailCreateArgs:
    description: "Parameters to create a One-Time Password (OTP) email."
    type: "object"
    properties:
      greeting:
        description: 'The smaller text above the title.'
        type: "string"
        example: "Hello Jane Doe,"
      logoClickURL:
        description: "The URL to redirect to when the logo is clicked."
        type: "string"
        example: "https://example.com"
      logoImageURL:
        description: "The URL to the logo image to display in the email."
        type: "string"
        example: "https://example.com/logo.png"
      serviceName:
        description: "The name of your service. This is used in invisible email metadata."
        type: "string"
        example: "example.com"
      subject:
        description: 'The subject of the email. It must be between 5 and 100 characters inclusive. Make sure to include
        the name of your application.'
        type: "string"
        example: "Login to example.com"
      subTitle:
        description: "The smaller text, right above the magic link button."
        type: "string"
        example: "Login using the button below."
      title:
        description: 'The larger text, right above the subtitle. It must be between 5 and 256 characters inclusive.
        Make sure to include the name of your application.'
        type: "string"
        example: "Login to example.com with a magic link"
      toEmail:
        description: "The email address to send the magic link to."
        type: "string"
        format: "email"
        example: "jane.doe@example.com"
      toName:
        description: "The name of the recipient."
        type: "string"
        example: "Jane Doe"
    required:
      - "subject"
      - "title"
      - "toEmail"
      - "serviceName"

  OTPEmailCreateRequest:
    type: "object"
    properties:
      otpCreateArgs:
        $ref: "#/definitions/OTPCreateArgs"
      otpEmailCreateArgs:
        $ref: "#/definitions/OTPEmailCreateArgs"
    required:
      - "otpCreateArgs"
      - "otpEmailCreateArgs"

  OTPEmailCreateResults:
    description: "The results for creating a One-Time Password (OTP) email."
    type: "object"
    properties:
      otpCreateResults:
        $ref: "#/definitions/OTPCreateResults"

  OTPEmailCreateResponse:
    type: "object"
    properties:
      otpEmailCreateResults:
        $ref: "#/definitions/OTPEmailCreateResults"
      requestMetadata:
        $ref: "#/definitions/RequestMetadata"

  PermanentMagicLinkCreateRequest:
    type: "object"
    properties:
      magicLinkCreateArgs:
        $ref: "#/definitions/MagicLinkCreateArgs"
    required:
      - "magicLinkCreateArgs"

  PermanentMagicLinkCreateResponse:
    type: "object"
    properties:
      magicLinkEmailCreateResults:
        $ref: "#/definitions/MagicLinkCreateResults"
      requestMetadata:
        $ref: "#/definitions/RequestMetadata"

  PermanentMagicLinkEmailCreateRequest:
    type: "object"
    properties:
      magicLinkCreateArgs:
        $ref: "#/definitions/MagicLinkEmailCreateArgs"
      magicLinkEmailCreateArgs:
        $ref: "#/definitions/MagicLinkCreateArgs"
    required:
      - "magicLinkCreateArgs"
      - "magicLinkEmailCreateArgs"

  PermanentMagicLinkEmailCreateResponse:
    type: "object"
    properties:
      magicLinkEmailCreateResults:
        $ref: "#/definitions/MagicLinkEmailCreateResults"
      requestMetadata:
        $ref: "#/definitions/RequestMetadata"

  ServiceAccountCreateRequest:
    description: "The request body for the /admin/service-account/create endpoint."
    type: "object"

  ServiceAccountCreateResults:
    description: "The results for creating a service account."
    type: "object"
    properties:
      serviceAccount:
        $ref: "#/definitions/ServiceAccount"

  ServiceAccountCreateResponse:
    description: "The response body for the /admin/service-account/create endpoint."
    type: "object"
    properties:
      serviceAccountCreateResults:
        $ref: "#/definitions/ServiceAccountCreateResults"
      requestMetadata:
        $ref: "#/definitions/RequestMetadata"

securityDefinitions:
  apiKey:
    type: "apiKey"
    in: "header"
    name: "X-API-KEY"
security:
  - apiKey: [ ]

tags:
  - name: "admin"
    description: "Endpoints for service accounts authorized with an admin API key."
