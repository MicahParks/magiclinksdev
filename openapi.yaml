openapi: 3.0.1
info:
  title: magiclinks.dev
  description: "The v2 API specification for the magiclinksdev project. \n\n The default\
    \ JWK Set relative URL path is `/api/v1/jwks.json`. \n\n The documentation site\
    \ is at https://docs.magiclinks.dev \n This is an Apache License 2.0 project:\
    \ https://github.com/MicahParks/magiclinksdev \n The optional SaaS platform's\
    \ landing page is: https://magiclinks.dev "
  version: 2.0.0
servers:
  - url: https://magiclinks.dev/api/v2
security:
  - apiKey: []
tags:
  - name: admin
    description: Endpoints for service accounts authorized with an admin API key.
paths:
  /ready:
    get:
      summary: Check if the service is running and ready to accept requests.
      operationId: ready
      responses:
        "200":
          description: The service is running and ready to accept requests.
          content: {}
        default:
          description: The service is not ready to accept requests.
          content: {}
  /admin/service-account/create:
    post:
      tags:
        - admin
      summary: Create a new service account.
      operationId: serviceAccountCreate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServiceAccountCreateRequest'
        required: true
      responses:
        "201":
          description: The service account has been created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceAccountCreateResponse'
        default:
          description: An error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-codegen-request-body-name: body
  /jwt/create:
    post:
      summary: "Create a JWT, typically for a JWT refresh."
      operationId: jwtCreate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JWTCreateRequest'
        required: true
      responses:
        "201":
          description: The JWT was created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JWTCreateResponse'
        default:
          description: An error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-codegen-request-body-name: body
  /jwt/validate:
    post:
      summary: Validate a JWT.
      operationId: jwtValidate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JWTValidateRequest'
        required: true
      responses:
        "200":
          description: The JWT was signed by an active key in the JWK Set.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JWTValidateResponse'
        "422":
          description: The given JWT was invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: An error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-codegen-request-body-name: body
  /magic-link/create:
    post:
      summary: Create a magic link.
      operationId: magicLinkCreate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MagicLinkCreateRequest'
        required: true
      responses:
        "201":
          description: The magic link was created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MagicLinkCreateResponse'
        default:
          description: An unexpected error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-codegen-request-body-name: body
  /magic-link-email/create:
    post:
      summary: Create a magic link and send it via email.
      operationId: magicLinkEmailCreate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MagicLinkEmailCreateRequest'
        required: true
      responses:
        "201":
          description: The magic link has been created and the email request has been
            accepted by the provider.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MagicLinkEmailCreateResponse'
        default:
          description: An unexpected error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-codegen-request-body-name: body
  /otp/create:
    post:
      summary: Create a One-Time Password (OTP).
      operationId: otpCreate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OTPCreateRequest'
        required: true
      responses:
        "201":
          description: The OTP was created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OTPCreateResponse'
        default:
          description: An unexpected error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-codegen-request-body-name: body
  /otp/validate:
    post:
      summary: Validate a One-Time Password (OTP) given its ID.
      operationId: otpValidate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OTPValidateRequest'
        required: true
      responses:
        "200":
          description: The OTP is valid for the given ID.
          content: {}
        "400":
          description: The OTP is invalid for the given ID.
          content: {}
        default:
          description: An unexpected error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-codegen-request-body-name: body
  /otp-email/create:
    post:
      summary: Create a One-Time Password (OTP) and sent it via email.
      operationId: otpEmailCreate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OTPEmailCreateRequest'
        required: true
      responses:
        "201":
          description: The OTP has been created and the email request has been accepted
            by the provider.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OTPEmailCreateResponse'
        default:
          description: An unexpected error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-codegen-request-body-name: body
components:
  schemas:
    Error:
      type: object
      properties:
        code:
          type: integer
          description: A copy of the HTTP response status code.
          format: int32
        message:
          type: string
          description: A human-readable error message.
        requestMetadata:
          $ref: '#/components/schemas/RequestMetadata'
    RequestMetadata:
      type: object
      properties:
        uuid:
          type: string
          description: A UUID that uniquely identifies the request.
          format: uuid
    ServiceAccount:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
        apiKey:
          type: string
        aud:
          type: string
        admin:
          type: boolean
    JWTCreateRequest:
      required:
        - jwtCreateParams
      type: object
      properties:
        jwtCreateParams:
          $ref: '#/components/schemas/JWTCreateParams'
      description: The request body for the /jwt/create endpoint.
    JWTCreateParams:
      type: object
      properties:
        alg:
          type: string
          description: The algorithm to use when signing the JWT. It defaults depends
            on the server's configuration. The default server configuration is "EdDSA".
            The default server options are "EdDSA" and "RS256".
        claims:
          type: object
          properties: {}
          description: Any valid JSON object. Do not provide any JSON attributes mentioned
            in RFC 7519 section 4.1 as this will cause an error. These are JWT "Registered
            Claim Names".
        lifespanSeconds:
          type: integer
          description: "The lifespan of the JWT in seconds. The JWT's lifespan starts\
            \ after the magic link has been visited and the JWT is signed. It defaults\
            \ to 5 minutes. The minimum value is 5 seconds and the maximum value is\
            \ 7905600000 seconds, which is a bit over 250 years."
      description: Parameters used to create a JWT.
    JWTCreateResults:
      type: object
      properties:
        jwt:
          type: string
          description: The signed JWT.
      description: The results for creating a JWT.
    JWTCreateResponse:
      type: object
      properties:
        jwtCreateResults:
          $ref: '#/components/schemas/JWTCreateResults'
        requestMetadata:
          $ref: '#/components/schemas/RequestMetadata'
      description: The response body for the /jwt/create endpoint.
    JWTValidateRequest:
      required:
        - jwtValidateParams
      type: object
      properties:
        jwtValidateParams:
          $ref: '#/components/schemas/JWTValidateParams'
      description: The request body for the /jwt/validate endpoint.
    JWTValidateParams:
      type: object
      properties:
        jwt:
          type: string
          description: The JWT to validate.
      description: Parameters used to validate a JWT.
    JWTValidateResults:
      type: object
      properties:
        claims:
          type: object
          properties: {}
          description: Any valid JSON object. Do not provide any JSON attributes mentioned
            in RFC 7519 section 4.1 as this will cause an error. These are JWT "Registered
            Claim Names".
      description: The results for validateing a JWT.
    JWTValidateResponse:
      type: object
      properties:
        jwtValidateResults:
          $ref: '#/components/schemas/JWTValidateResults'
        requestMetadata:
          $ref: '#/components/schemas/RequestMetadata'
      description: The response body for the /jwt/validate endpoint.
    MagicLinkLimits:
      type: object
      properties:
        lifespanSeconds:
          type: integer
          description: "The number of seconds the magic link should be active for\
            \ after the request has been processed. It defaults to 1 hour. The minimum\
            \ value is 5 seconds and the maximum value is 7905600000 seconds, which\
            \ is a bit over 250 years."
    MagicLinkCreateParams:
      required:
        - redirectURL
      type: object
      properties:
        jwtCreateParams:
          $ref: '#/components/schemas/JWTCreateParams'
        redirectQueryKey:
          type: string
          description: "The URL query key in the redirectURL to contain the signed\
            \ JWT when the magic link is used. By default, \"jwt\" is used."
        redirectURL:
          type: string
          description: The URL to redirect to with the signed JWT when the magic link
            is used.
      description: Parameters to create a magic link.
    MagicLinkCreateRequest:
      required:
        - magicLinkCreateParams
      type: object
      properties:
        magicLinkCreateParams:
          $ref: '#/components/schemas/MagicLinkCreateParams'
        magicLinkLimits:
          $ref: '#/components/schemas/MagicLinkLimits'
    MagicLinkCreateResults:
      type: object
      properties:
        magicLink:
          type: string
          description: "The URL that will act as a magic link. When this URL is visited,\
            \ a new JWT will be created. A redirect wil be performed with this new\
            \ JWT in the redirect URL's query parameter."
        secret:
          type: string
          description: The secret embedded in the magic link.
    MagicLinkCreateResponse:
      type: object
      properties:
        magicLinkCreateResults:
          $ref: '#/components/schemas/MagicLinkCreateResults'
        requestMetadata:
          $ref: '#/components/schemas/RequestMetadata'
    MagicLinkEmailCreateParams:
      required:
        - serviceName
        - subject
        - title
        - toEmail
      type: object
      properties:
        buttonText:
          type: string
          description: The text to display on the button in the email. It defaults
            to "Magic link".
          example: Login
          default: Magic link
        greeting:
          type: string
          description: The smaller text above the title.
          example: "Hello Jane Doe,"
        logoClickURL:
          type: string
          description: The URL to redirect to when the logo is clicked.
          example: https://example.com
        logoImageURL:
          type: string
          description: The URL to the logo image to display in the email.
          example: https://example.com/logo.png
        serviceName:
          type: string
          description: The name of your service. This is used in invisible email metadata.
          example: example.com
        subject:
          type: string
          description: The subject of the email. It must be between 5 and 100 characters
            inclusive. Make sure to include the name of your application.
          example: Login to example.com
        subTitle:
          type: string
          description: "The smaller text, right above the magic link button."
          example: Login using the button below.
        title:
          type: string
          description: "The larger text, right above the subtitle. It must be between\
            \ 5 and 256 characters inclusive. Make sure to include the name of your\
            \ application."
          example: Login to example.com with a magic link
        toEmail:
          type: string
          description: The email address to send the magic link to.
          format: email
          example: jane.doe@example.com
        toName:
          type: string
          description: The name of the recipient.
          example: Jane Doe
      description: Parameters to create a magic link email.
    MagicLinkEmailCreateRequest:
      required:
        - magicLinkCreateParams
        - magicLinkEmailCreateParams
      type: object
      properties:
        magicLinkCreateParams:
          $ref: '#/components/schemas/MagicLinkCreateParams'
        magicLinkEmailCreateParams:
          $ref: '#/components/schemas/MagicLinkEmailCreateParams'
    MagicLinkEmailCreateResults:
      type: object
      properties:
        magicLinkCreateResults:
          $ref: '#/components/schemas/MagicLinkCreateResults'
      description: The results for creating a magic link email.
    MagicLinkEmailCreateResponse:
      type: object
      properties:
        magicLinkEmailCreateResults:
          $ref: '#/components/schemas/MagicLinkEmailCreateResults'
        requestMetadata:
          $ref: '#/components/schemas/RequestMetadata'
    OTPCreateParams:
      type: object
      properties:
        lifespanSeconds:
          type: integer
          description: "The lifespan of the OTP in seconds. The OTP's lifespan starts\
            \ after the magic link has been visited and the OTP is created. It defaults\
            \ to 5 minutes. The minimum value is 5 seconds and the maximum value is\
            \ 7905600000 seconds, which is a bit over 250 years."
      description: Parameters to create a One-Time Password (OTP).
    OTPCreateRequest:
      required:
        - otpCreateParams
      type: object
      properties:
        otpCreateParams:
          $ref: '#/components/schemas/OTPCreateParams'
    OTPCreateResults:
      type: object
      properties:
        id:
          type: string
          description: The ID of the OTP.
        otp:
          type: string
          description: The One-Time Password.
      description: The results for creating a One-Time Password (OTP).
    OTPCreateResponse:
      type: object
      properties:
        otpCreateResults:
          $ref: '#/components/schemas/OTPCreateResults'
        requestMetadata:
          $ref: '#/components/schemas/RequestMetadata'
    OTPEmailCreateParams:
      required:
        - serviceName
        - subject
        - title
        - toEmail
      type: object
      properties:
        greeting:
          type: string
          description: The smaller text above the title.
          example: "Hello Jane Doe,"
        logoClickURL:
          type: string
          description: The URL to redirect to when the logo is clicked.
          example: https://example.com
        logoImageURL:
          type: string
          description: The URL to the logo image to display in the email.
          example: https://example.com/logo.png
        serviceName:
          type: string
          description: The name of your service. This is used in invisible email metadata.
          example: example.com
        subject:
          type: string
          description: The subject of the email. It must be between 5 and 100 characters
            inclusive. Make sure to include the name of your application.
          example: Login to example.com
        subTitle:
          type: string
          description: "The smaller text, right above the magic link button."
          example: Login using the button below.
        title:
          type: string
          description: "The larger text, right above the subtitle. It must be between\
            \ 5 and 256 characters inclusive. Make sure to include the name of your\
            \ application."
          example: Login to example.com with a magic link
        toEmail:
          type: string
          description: The email address to send the magic link to.
          format: email
          example: jane.doe@example.com
        toName:
          type: string
          description: The name of the recipient.
          example: Jane Doe
      description: Parameters to create a One-Time Password (OTP) email.
    OTPEmailCreateRequest:
      required:
        - otpCreateParams
        - otpEmailCreateParams
      type: object
      properties:
        otpCreateParams:
          $ref: '#/components/schemas/OTPCreateParams'
        otpEmailCreateParams:
          $ref: '#/components/schemas/OTPEmailCreateParams'
    OTPEmailCreateResults:
      type: object
      properties:
        otpCreateResults:
          $ref: '#/components/schemas/OTPCreateResults'
      description: The results for creating a One-Time Password (OTP) email.
    OTPEmailCreateResponse:
      type: object
      properties:
        otpEmailCreateResults:
          $ref: '#/components/schemas/OTPEmailCreateResults'
        requestMetadata:
          $ref: '#/components/schemas/RequestMetadata'
    OTPValidateRequest:
      type: object
      properties:
        id:
          type: string
          description: The ID of the OTP to validate.
        otp:
          type: string
          description: The user provided One-Time Password to validate.
    ServiceAccountCreateRequest:
      type: object
      description: The request body for the /admin/service-account/create endpoint.
    ServiceAccountCreateResults:
      type: object
      properties:
        serviceAccount:
          $ref: '#/components/schemas/ServiceAccount'
      description: The results for creating a service account.
    ServiceAccountCreateResponse:
      type: object
      properties:
        serviceAccountCreateResults:
          $ref: '#/components/schemas/ServiceAccountCreateResults'
        requestMetadata:
          $ref: '#/components/schemas/RequestMetadata'
      description: The response body for the /admin/service-account/create endpoint.
  securitySchemes:
    apiKey:
      type: apiKey
      name: X-API-KEY
      in: header
x-original-swagger-version: "2.0"
